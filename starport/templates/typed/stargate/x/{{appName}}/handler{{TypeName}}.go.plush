package <%= AppName %>

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	"<%= ModulePath %>/x/<%= AppName %>/types"
	"<%= ModulePath %>/x/<%= AppName %>/keeper"
)

// This file contains the handlers for transactions defined in 
func handleMsgCreate<%= title(TypeName) %>(ctx sdk.Context, k keeper.Keeper, msg types.MsgCreate<%= title(TypeName) %>) (*sdk.Result, error) {
	var <%= TypeName %> = types.<%= title(TypeName) %>{
		Creator: msg.Creator,
		Id:      msg.Id,<%= for (field) in Fields { %>
    	<%= title(field.Name) %>: msg.<%= title(field.Name) %>,<% } %>
	}
	k.Create<%= title(TypeName) %>(ctx, <%= TypeName %>)

	return &sdk.Result{Events: ctx.EventManager().Events()}, nil
}

func handleMsgCreate<%= title(TypeName) %>(ctx sdk.Context, k keeper.Keeper, <%= TypeName %> *types.MsgCreate<%= title(TypeName) %>) (*sdk.Result, error) {
	k.Create<%= title(TypeName) %>(ctx, *<%= TypeName %>)

	return &sdk.Result{Events: ctx.EventManager().ABCIEvents()}, nil
}

// Handle a message to delete name
func handleMsgDelete<%= title(TypeName) %>(ctx sdk.Context, k keeper.Keeper, msg types.MsgDelete<%= title(TypeName) %>) (*sdk.Result, error) {
	if !k.<%= title(TypeName) %>Exists(ctx, msg.Id) {
		// replace with ErrKeyNotFound for 0.39+
		return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, msg.Id)
	}
	if !msg.Creator.Equals(k.Get<%= title(TypeName) %>Owner(ctx, msg.Id)) {
		return nil, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, "Incorrect Owner")
	}

	k.Delete<%= title(TypeName) %>(ctx, msg.Id)
	return &sdk.Result{}, nil
}

func handleMsgSet<%= title(TypeName) %>(ctx sdk.Context, k keeper.Keeper, msg types.MsgSet<%= title(TypeName) %>) (*sdk.Result, error) {
	var <%= TypeName %> = types.<%= title(TypeName) %>{
		Creator: msg.Creator,
		Id:      msg.Id,<%= for (field) in Fields { %>
    	<%= title(field.Name) %>: msg.<%= title(field.Name) %>,<% } %>
	}
	if !msg.Creator.Equals(k.Get<%= title(TypeName) %>Owner(ctx, msg.Id)) { // Checks if the the msg sender is the same as the current owner
		return nil, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, "Incorrect Owner") // If not, throw an error
	}

	k.Set<%= title(TypeName) %>(ctx, <%= TypeName %>)

	return &sdk.Result{Events: ctx.EventManager().Events()}, nil
}
