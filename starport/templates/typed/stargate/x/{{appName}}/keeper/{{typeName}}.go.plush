package keeper

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	"<%= ModulePath %>/x/<%= AppName %>/types"
	"github.com/cosmos/cosmos-sdk/store/prefix"
)

// Create<%= title(TypeName) %> creates a <%= TypeName %>
func (k Keeper) Create<%= title(TypeName) %>(ctx sdk.Context, <%= TypeName %> types.MsgCreate<%= title(TypeName) %>) {
	store :=  prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.<%= title(TypeName) %>Key))
	_, err := k.GetClaim(ctx, claim.Proof)
	// Check if claim exists
	if err != nil {
		b := k.cdc.MustMarshalBinaryBare(&<%= TypeName %>)
		store.Set(<%= TypeName %>.Id, b)
	}
}

// Get<%= title(TypeName) %> returns the <%= TypeName %> information
func (k Keeper) Get<%= title(TypeName) %>(ctx sdk.Context, key string) (types.<%= title(TypeName) %>, error) {
	store :=  prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.<%= title(TypeName) %>Key))
	var <%= TypeName %> types.<%= title(TypeName) %>
	byteKey := []byte(key)
	if err := k.cdc.UnmarshalBinaryLengthPrefixed(store.Get(byteKey), &<%= TypeName %>); err != nil {
		return <%= TypeName %>, err
	}
	return <%= TypeName %>, nil
}

func (k Keeper) Set<%= title(TypeName) %>(ctx sdk.Context, <%= TypeName %> types.<%= title(TypeName) %>) {
	<%= TypeName %>Key := <%= TypeName %>.Id
	store :=  prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.<%= title(TypeName) %>Key))
	b := k.cdc.MustMarshalBinaryBare(&<%= TypeName %>)
	key := []byte(<%= TypeName %>Key)
	store.Set(key, b)
}

func (k Keeper) DeleteClaim(ctx sdk.Context, key string) {
	store :=  prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.<%= title(TypeName) %>Key))
	store.Delete([]byte(key))
}

func (k Keeper) GetAll<%= title(TypeName) %>(ctx sdk.Context) (msgs []types.<%= title(TypeName) %>) {
    store := prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.<%= title(TypeName) %>Key))
	iterator := sdk.KVStorePrefixIterator(store, types.KeyPrefix(types.<%= title(TypeName) %>Key))

	defer iterator.Close()

	for ; iterator.Valid(); iterator.Next() {
		var msg types.Msg<%= title(TypeName) %>
		k.cdc.MustUnmarshalBinaryBare(iterator.Value(), &msg)
        msgs = append(msgs, msg)
	}

    return
}

// Get creator of the item
func (k Keeper) Get<%= title(TypeName) %>Owner(ctx sdk.Context, key string) sdk.AccAddress {
	<%= TypeName %>, err := k.Get<%= title(TypeName) %>(ctx, key)
	if err != nil {
		return nil
	}
	return <%= TypeName %>.Creator
}

// Check if the key exists in the store
func (k Keeper) <%= title(TypeName) %>Exists(ctx sdk.Context, key string) bool {
	store := ctx.KVStore(k.storeKey)
	return store.Has([]byte(types.<%= title(TypeName) %>Prefix + key))
}